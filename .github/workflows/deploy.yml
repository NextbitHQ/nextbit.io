name: Deploy to Production

on:
  push:
    branches: [production]
  workflow_dispatch:

env:
  NODE_VERSION: "20"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check Required Variables
        run: |
          [[ -z "$SSH_HOST" ]] && echo "SSH_HOST is required" && exit 1
          [[ -z "$SSH_USER" ]] && echo "SSH_USER is required" && exit 1
          [[ -z "$DEPLOY_DIR" ]] && echo "DEPLOY_DIR is required" && exit 1
          [[ -z "$SSH_PRIVATE_KEY" ]] && echo "SSH_PRIVATE_KEY is required" && exit 1
        env:
          SSH_HOST: ${{ vars.SSH_HOST }}
          SSH_USER: ${{ vars.SSH_USER }}
          DEPLOY_DIR: ${{ vars.DEPLOY_DIR }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Get Repository Name
        id: repo-name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Deploy
        run: |
          rsync -avz --delete \
            --exclude=".git" \
            --exclude="node_modules" \
            --exclude=".env" \
            --exclude=".next/cache" \
            --include=".next" \
            --include=".next/**" \
            --include="public" \
            --include="public/**" \
            --include="package*.json" \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:${{ vars.DEPLOY_DIR }}/${{ steps.repo-name.outputs.REPO_NAME }}

      - name: Setup and Start Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ vars.DEPLOY_DIR }}/${{ steps.repo-name.outputs.REPO_NAME }}

            npm ci --production

            cat > ecosystem.config.js << 'EOL'
            module.exports = {
              apps: [{
                name: '${{ steps.repo-name.outputs.REPO_NAME }}',
                script: 'npm',
                args: 'start',
                env: {
                  NODE_ENV: 'production',
                  PORT: '${{ vars.APP_PORT || 3000 }}'
                },
                max_memory_restart: '200M',
                exec_mode: 'cluster',
                instances: 'max',
                watch: false,
                autorestart: true,
                merge_logs: true,
                log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
                out_file: '/dev/null',
                error_file: '/dev/null'
              }]
            }
            EOL

            if pm2 describe ${{ steps.repo-name.outputs.REPO_NAME }} > /dev/null; then
              pm2 reload ecosystem.config.js
            else
              pm2 start ecosystem.config.js
            fi

            pm2 save
